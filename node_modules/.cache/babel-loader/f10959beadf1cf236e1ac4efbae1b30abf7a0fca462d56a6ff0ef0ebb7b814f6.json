{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $isTextNode, $getCharacterOffsets, $isElementNode, $isRootNode, $getNodeByKey, $getPreviousSelection, $createTextNode, $isRangeSelection, $getSelection, $isTokenOrSegmented, $getRoot, $isRootOrShadowRoot, $hasAncestor, $isLeafNode, $setSelection, $getAdjacentNode, $isDecoratorNode, $isLineBreakNode } from 'lexical';\nexport { $cloneWithProperties, $selectAll } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CSS_TO_STYLES = new Map();\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction getDOMIndexWithinParent(node) {\n  const parent = node.parentNode;\n  if (parent == null) {\n    throw new Error('Should never happen');\n  }\n  return [parent, Array.from(parent.childNodes).indexOf(node)];\n}\n\n/**\n * Creates a selection range for the DOM.\n * @param editor - The lexical editor.\n * @param anchorNode - The anchor node of a selection.\n * @param _anchorOffset - The amount of space offset from the anchor to the focus.\n * @param focusNode - The current focus.\n * @param _focusOffset - The amount of space offset from the focus to the anchor.\n * @returns The range of selection for the DOM that was created.\n */\nfunction createDOMRange(editor, anchorNode, _anchorOffset, focusNode, _focusOffset) {\n  const anchorKey = anchorNode.getKey();\n  const focusKey = focusNode.getKey();\n  const range = document.createRange();\n  let anchorDOM = editor.getElementByKey(anchorKey);\n  let focusDOM = editor.getElementByKey(focusKey);\n  let anchorOffset = _anchorOffset;\n  let focusOffset = _focusOffset;\n  if ($isTextNode(anchorNode)) {\n    anchorDOM = getDOMTextNode(anchorDOM);\n  }\n  if ($isTextNode(focusNode)) {\n    focusDOM = getDOMTextNode(focusDOM);\n  }\n  if (anchorNode === undefined || focusNode === undefined || anchorDOM === null || focusDOM === null) {\n    return null;\n  }\n  if (anchorDOM.nodeName === 'BR') {\n    [anchorDOM, anchorOffset] = getDOMIndexWithinParent(anchorDOM);\n  }\n  if (focusDOM.nodeName === 'BR') {\n    [focusDOM, focusOffset] = getDOMIndexWithinParent(focusDOM);\n  }\n  const firstChild = anchorDOM.firstChild;\n  if (anchorDOM === focusDOM && firstChild != null && firstChild.nodeName === 'BR' && anchorOffset === 0 && focusOffset === 0) {\n    focusOffset = 1;\n  }\n  try {\n    range.setStart(anchorDOM, anchorOffset);\n    range.setEnd(focusDOM, focusOffset);\n  } catch (e) {\n    return null;\n  }\n  if (range.collapsed && (anchorOffset !== focusOffset || anchorKey !== focusKey)) {\n    // Range is backwards, we need to reverse it\n    range.setStart(focusDOM, focusOffset);\n    range.setEnd(anchorDOM, anchorOffset);\n  }\n  return range;\n}\n\n/**\n * Creates DOMRects, generally used to help the editor find a specific location on the screen.\n * @param editor - The lexical editor\n * @param range - A fragment of a document that can contain nodes and parts of text nodes.\n * @returns The selectionRects as an array.\n */\nfunction createRectsFromDOMRange(editor, range) {\n  const rootElement = editor.getRootElement();\n  if (rootElement === null) {\n    return [];\n  }\n  const rootRect = rootElement.getBoundingClientRect();\n  const computedStyle = getComputedStyle(rootElement);\n  const rootPadding = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n  const selectionRects = Array.from(range.getClientRects());\n  let selectionRectsLength = selectionRects.length;\n  //sort rects from top left to bottom right.\n  selectionRects.sort((a, b) => {\n    const top = a.top - b.top;\n    // Some rects match position closely, but not perfectly,\n    // so we give a 3px tolerance.\n    if (Math.abs(top) <= 3) {\n      return a.left - b.left;\n    }\n    return top;\n  });\n  let prevRect;\n  for (let i = 0; i < selectionRectsLength; i++) {\n    const selectionRect = selectionRects[i];\n    // Exclude rects that overlap preceding Rects in the sorted list.\n    const isOverlappingRect = prevRect && prevRect.top <= selectionRect.top && prevRect.top + prevRect.height > selectionRect.top && prevRect.left + prevRect.width > selectionRect.left;\n    // Exclude selections that span the entire element\n    const selectionSpansElement = selectionRect.width + rootPadding === rootRect.width;\n    if (isOverlappingRect || selectionSpansElement) {\n      selectionRects.splice(i--, 1);\n      selectionRectsLength--;\n      continue;\n    }\n    prevRect = selectionRect;\n  }\n  return selectionRects;\n}\n\n/**\n * Creates an object containing all the styles and their values provided in the CSS string.\n * @param css - The CSS string of styles and their values.\n * @returns The styleObject containing all the styles and their values.\n */\nfunction getStyleObjectFromRawCSS(css) {\n  const styleObject = {};\n  if (!css) {\n    return styleObject;\n  }\n  const styles = css.split(';');\n  for (const style of styles) {\n    if (style !== '') {\n      const [key, value] = style.split(/:([^]+)/); // split on first colon\n      if (key && value) {\n        styleObject[key.trim()] = value.trim();\n      }\n    }\n  }\n  return styleObject;\n}\n\n/**\n * Given a CSS string, returns an object from the style cache.\n * @param css - The CSS property as a string.\n * @returns The value of the given CSS property.\n */\nfunction getStyleObjectFromCSS(css) {\n  let value = CSS_TO_STYLES.get(css);\n  if (value === undefined) {\n    value = getStyleObjectFromRawCSS(css);\n    CSS_TO_STYLES.set(css, value);\n  }\n  {\n    // Freeze the value in DEV to prevent accidental mutations\n    Object.freeze(value);\n  }\n  return value;\n}\n\n/**\n * Gets the CSS styles from the style object.\n * @param styles - The style object containing the styles to get.\n * @returns A string containing the CSS styles and their values.\n */\nfunction getCSSFromStyleObject(styles) {\n  let css = '';\n  for (const style in styles) {\n    if (style) {\n      css += `${style}: ${styles[style]};`;\n    }\n  }\n  return css;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Generally used to append text content to HTML and JSON. Grabs the text content and \"slices\"\n * it to be generated into the new TextNode.\n * @param selection - The selection containing the node whose TextNode is to be edited.\n * @param textNode - The TextNode to be edited.\n * @returns The updated TextNode.\n */\nfunction $sliceSelectedTextNodeContent(selection, textNode) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (textNode.isSelected(selection) && !textNode.isSegmented() && !textNode.isToken() && anchorAndFocus !== null) {\n    const [anchor, focus] = anchorAndFocus;\n    const isBackward = selection.isBackward();\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    const isAnchor = textNode.is(anchorNode);\n    const isFocus = textNode.is(focusNode);\n    if (isAnchor || isFocus) {\n      const [anchorOffset, focusOffset] = $getCharacterOffsets(selection);\n      const isSame = anchorNode.is(focusNode);\n      const isFirst = textNode.is(isBackward ? focusNode : anchorNode);\n      const isLast = textNode.is(isBackward ? anchorNode : focusNode);\n      let startOffset = 0;\n      let endOffset = undefined;\n      if (isSame) {\n        startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n      } else if (isFirst) {\n        const offset = isBackward ? focusOffset : anchorOffset;\n        startOffset = offset;\n        endOffset = undefined;\n      } else if (isLast) {\n        const offset = isBackward ? anchorOffset : focusOffset;\n        startOffset = 0;\n        endOffset = offset;\n      }\n      textNode.__text = textNode.__text.slice(startOffset, endOffset);\n      return textNode;\n    }\n  }\n  return textNode;\n}\n\n/**\n * Determines if the current selection is at the end of the node.\n * @param point - The point of the selection to test.\n * @returns true if the provided point offset is in the last possible position, false otherwise.\n */\nfunction $isAtNodeEnd(point) {\n  if (point.type === 'text') {\n    return point.offset === point.getNode().getTextContentSize();\n  }\n  const node = point.getNode();\n  if (!$isElementNode(node)) {\n    throw Error(`isAtNodeEnd: node must be a TextNode or ElementNode`);\n  }\n  return point.offset === node.getChildrenSize();\n}\n\n/**\n * Trims text from a node in order to shorten it, eg. to enforce a text's max length. If it deletes text\n * that is an ancestor of the anchor then it will leave 2 indents, otherwise, if no text content exists, it deletes\n * the TextNode. It will move the focus to either the end of any left over text or beginning of a new TextNode.\n * @param editor - The lexical editor.\n * @param anchor - The anchor of the current selection, where the selection should be pointing.\n * @param delCount - The amount of characters to delete. Useful as a dynamic variable eg. textContentSize - maxLength;\n */\nfunction $trimTextContentFromAnchor(editor, anchor, delCount) {\n  // Work from the current selection anchor point\n  let currentNode = anchor.getNode();\n  let remaining = delCount;\n  if ($isElementNode(currentNode)) {\n    const descendantNode = currentNode.getDescendantByIndex(anchor.offset);\n    if (descendantNode !== null) {\n      currentNode = descendantNode;\n    }\n  }\n  while (remaining > 0 && currentNode !== null) {\n    if ($isElementNode(currentNode)) {\n      const lastDescendant = currentNode.getLastDescendant();\n      if (lastDescendant !== null) {\n        currentNode = lastDescendant;\n      }\n    }\n    let nextNode = currentNode.getPreviousSibling();\n    let additionalElementWhitespace = 0;\n    if (nextNode === null) {\n      let parent = currentNode.getParentOrThrow();\n      let parentSibling = parent.getPreviousSibling();\n      while (parentSibling === null) {\n        parent = parent.getParent();\n        if (parent === null) {\n          nextNode = null;\n          break;\n        }\n        parentSibling = parent.getPreviousSibling();\n      }\n      if (parent !== null) {\n        additionalElementWhitespace = parent.isInline() ? 0 : 2;\n        nextNode = parentSibling;\n      }\n    }\n    let text = currentNode.getTextContent();\n    // If the text is empty, we need to consider adding in two line breaks to match\n    // the content if we were to get it from its parent.\n    if (text === '' && $isElementNode(currentNode) && !currentNode.isInline()) {\n      // TODO: should this be handled in core?\n      text = '\\n\\n';\n    }\n    const currentNodeSize = text.length;\n    if (!$isTextNode(currentNode) || remaining >= currentNodeSize) {\n      const parent = currentNode.getParent();\n      currentNode.remove();\n      if (parent != null && parent.getChildrenSize() === 0 && !$isRootNode(parent)) {\n        parent.remove();\n      }\n      remaining -= currentNodeSize + additionalElementWhitespace;\n      currentNode = nextNode;\n    } else {\n      const key = currentNode.getKey();\n      // See if we can just revert it to what was in the last editor state\n      const prevTextContent = editor.getEditorState().read(() => {\n        const prevNode = $getNodeByKey(key);\n        if ($isTextNode(prevNode) && prevNode.isSimpleText()) {\n          return prevNode.getTextContent();\n        }\n        return null;\n      });\n      const offset = currentNodeSize - remaining;\n      const slicedText = text.slice(0, offset);\n      if (prevTextContent !== null && prevTextContent !== text) {\n        const prevSelection = $getPreviousSelection();\n        let target = currentNode;\n        if (!currentNode.isSimpleText()) {\n          const textNode = $createTextNode(prevTextContent);\n          currentNode.replace(textNode);\n          target = textNode;\n        } else {\n          currentNode.setTextContent(prevTextContent);\n        }\n        if ($isRangeSelection(prevSelection) && prevSelection.isCollapsed()) {\n          const prevOffset = prevSelection.anchor.offset;\n          target.select(prevOffset, prevOffset);\n        }\n      } else if (currentNode.isSimpleText()) {\n        // Split text\n        const isSelected = anchor.key === key;\n        let anchorOffset = anchor.offset;\n        // Move offset to end if it's less than the remaining number, otherwise\n        // we'll have a negative splitStart.\n        if (anchorOffset < remaining) {\n          anchorOffset = currentNodeSize;\n        }\n        const splitStart = isSelected ? anchorOffset - remaining : 0;\n        const splitEnd = isSelected ? anchorOffset : offset;\n        if (isSelected && splitStart === 0) {\n          const [excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        } else {\n          const [, excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        }\n      } else {\n        const textNode = $createTextNode(slicedText);\n        currentNode.replace(textNode);\n      }\n      remaining = 0;\n    }\n  }\n}\n\n/**\n * Gets the TextNode's style object and adds the styles to the CSS.\n * @param node - The TextNode to add styles to.\n */\nfunction $addNodeStyle(node) {\n  const CSSText = node.getStyle();\n  const styles = getStyleObjectFromRawCSS(CSSText);\n  CSS_TO_STYLES.set(CSSText, styles);\n}\nfunction $patchStyle(target, patch) {\n  const prevStyles = getStyleObjectFromCSS('getStyle' in target ? target.getStyle() : target.style);\n  const newStyles = Object.entries(patch).reduce((styles, [key, value]) => {\n    if (typeof value === 'function') {\n      styles[key] = value(prevStyles[key], target);\n    } else if (value === null) {\n      delete styles[key];\n    } else {\n      styles[key] = value;\n    }\n    return styles;\n  }, {\n    ...prevStyles\n  } || {});\n  const newCSSText = getCSSFromStyleObject(newStyles);\n  target.setStyle(newCSSText);\n  CSS_TO_STYLES.set(newCSSText, newStyles);\n}\n\n/**\n * Applies the provided styles to the TextNodes in the provided Selection.\n * Will update partially selected TextNodes by splitting the TextNode and applying\n * the styles to the appropriate one.\n * @param selection - The selected node(s) to update.\n * @param patch - The patch to apply, which can include multiple styles. \\\\{CSSProperty: value\\\\} . Can also accept a function that returns the new property value.\n */\nfunction $patchStyleText(selection, patch) {\n  if (selection.isCollapsed() && $isRangeSelection(selection)) {\n    $patchStyle(selection, patch);\n  } else {\n    $forEachSelectedTextNode(textNode => {\n      $patchStyle(textNode, patch);\n    });\n  }\n}\nfunction $forEachSelectedTextNode(fn) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return;\n  }\n  const selectedNodes = selection.getNodes();\n  const selectedNodesLength = selectedNodes.length;\n  const {\n    anchor,\n    focus\n  } = selection;\n  const lastIndex = selectedNodesLength - 1;\n  let firstNode = selectedNodes[0];\n  let lastNode = selectedNodes[lastIndex];\n  const firstNodeText = firstNode.getTextContent();\n  const firstNodeTextLength = firstNodeText.length;\n  const focusOffset = focus.offset;\n  let anchorOffset = anchor.offset;\n  const isBefore = anchor.isBefore(focus);\n  let startOffset = isBefore ? anchorOffset : focusOffset;\n  let endOffset = isBefore ? focusOffset : anchorOffset;\n  const startType = isBefore ? anchor.type : focus.type;\n  const endType = isBefore ? focus.type : anchor.type;\n  const endKey = isBefore ? focus.key : anchor.key;\n\n  // This is the case where the user only selected the very end of the\n  // first node so we don't want to include it in the formatting change.\n  if ($isTextNode(firstNode) && startOffset === firstNodeTextLength) {\n    const nextSibling = firstNode.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      // we basically make the second node the firstNode, changing offsets accordingly\n      anchorOffset = 0;\n      startOffset = 0;\n      firstNode = nextSibling;\n    }\n  }\n\n  // This is the case where we only selected a single node\n  if (selectedNodes.length === 1) {\n    if ($isTextNode(firstNode) && firstNode.canHaveFormat()) {\n      startOffset = startType === 'element' ? 0 : anchorOffset > focusOffset ? focusOffset : anchorOffset;\n      endOffset = endType === 'element' ? firstNodeTextLength : anchorOffset > focusOffset ? anchorOffset : focusOffset;\n\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n\n      // The entire node is selected or a token/segment, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNodeTextLength) {\n        fn(firstNode);\n        firstNode.select(startOffset, endOffset);\n      } else {\n        // The node is partially selected, so split it into two nodes\n        // and style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        fn(replacement);\n        replacement.select(0, endOffset - startOffset);\n      }\n    } // multiple nodes selected.\n  } else {\n    if ($isTextNode(firstNode) && startOffset < firstNode.getTextContentSize() && firstNode.canHaveFormat()) {\n      if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n        // the entire first node isn't selected and it isn't a token or segmented, so split it\n        firstNode = firstNode.splitText(startOffset)[1];\n        startOffset = 0;\n        if (isBefore) {\n          anchor.set(firstNode.getKey(), startOffset, 'text');\n        } else {\n          focus.set(firstNode.getKey(), startOffset, 'text');\n        }\n      }\n      fn(firstNode);\n    }\n    if ($isTextNode(lastNode) && lastNode.canHaveFormat()) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n\n      // The last node might not actually be the end node\n      //\n      // If not, assume the last node is fully-selected unless the end offset is\n      // zero.\n      if (lastNode.__key !== endKey && endOffset !== 0) {\n        endOffset = lastNodeTextLength;\n      }\n\n      // if the entire last node isn't selected and it isn't a token or segmented, split it\n      if (endOffset !== lastNodeTextLength && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      if (endOffset !== 0 || endType === 'element') {\n        fn(lastNode);\n      }\n    }\n\n    // style all the text nodes in between\n    for (let i = 1; i < lastIndex; i++) {\n      const selectedNode = selectedNodes[i];\n      const selectedNodeKey = selectedNode.getKey();\n      if ($isTextNode(selectedNode) && selectedNode.canHaveFormat() && selectedNodeKey !== firstNode.getKey() && selectedNodeKey !== lastNode.getKey() && !selectedNode.isToken()) {\n        fn(selectedNode);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Converts all nodes in the selection that are of one block type to another.\n * @param selection - The selected blocks to be converted.\n * @param createElement - The function that creates the node. eg. $createParagraphNode.\n */\nfunction $setBlocksType(selection, createElement) {\n  if (selection === null) {\n    return;\n  }\n  const anchorAndFocus = selection.getStartEndPoints();\n  const anchor = anchorAndFocus ? anchorAndFocus[0] : null;\n  if (anchor !== null && anchor.key === 'root') {\n    const element = createElement();\n    const root = $getRoot();\n    const firstChild = root.getFirstChild();\n    if (firstChild) {\n      firstChild.replace(element, true);\n    } else {\n      root.append(element);\n    }\n    return;\n  }\n  const nodes = selection.getNodes();\n  const firstSelectedBlock = anchor !== null ? $getAncestor(anchor.getNode(), INTERNAL_$isBlock) : false;\n  if (firstSelectedBlock && nodes.indexOf(firstSelectedBlock) === -1) {\n    nodes.push(firstSelectedBlock);\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!INTERNAL_$isBlock(node)) {\n      continue;\n    }\n    if (!$isElementNode(node)) {\n      throw Error(`Expected block node to be an ElementNode`);\n    }\n    const targetElement = createElement();\n    targetElement.setFormat(node.getFormatType());\n    targetElement.setIndent(node.getIndent());\n    node.replace(targetElement, true);\n  }\n}\nfunction isPointAttached(point) {\n  return point.getNode().isAttached();\n}\nfunction $removeParentEmptyElements(startingNode) {\n  let node = startingNode;\n  while (node !== null && !$isRootOrShadowRoot(node)) {\n    const latest = node.getLatest();\n    const parentNode = node.getParent();\n    if (latest.getChildrenSize() === 0) {\n      node.remove(true);\n    }\n    node = parentNode;\n  }\n}\n\n/**\n * @deprecated\n * Wraps all nodes in the selection into another node of the type returned by createElement.\n * @param selection - The selection of nodes to be wrapped.\n * @param createElement - A function that creates the wrapping ElementNode. eg. $createParagraphNode.\n * @param wrappingElement - An element to append the wrapped selection and its children to.\n */\nfunction $wrapNodes(selection, createElement, wrappingElement = null) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  const anchor = anchorAndFocus ? anchorAndFocus[0] : null;\n  const nodes = selection.getNodes();\n  const nodesLength = nodes.length;\n  if (anchor !== null && (nodesLength === 0 || nodesLength === 1 && anchor.type === 'element' && anchor.getNode().getChildrenSize() === 0)) {\n    const target = anchor.type === 'text' ? anchor.getNode().getParentOrThrow() : anchor.getNode();\n    const children = target.getChildren();\n    let element = createElement();\n    element.setFormat(target.getFormatType());\n    element.setIndent(target.getIndent());\n    children.forEach(child => element.append(child));\n    if (wrappingElement) {\n      element = wrappingElement.append(element);\n    }\n    target.replace(element);\n    return;\n  }\n  let topLevelNode = null;\n  let descendants = [];\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    // Determine whether wrapping has to be broken down into multiple chunks. This can happen if the\n    // user selected multiple Root-like nodes that have to be treated separately as if they are\n    // their own branch. I.e. you don't want to wrap a whole table, but rather the contents of each\n    // of each of the cell nodes.\n    if ($isRootOrShadowRoot(node)) {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [];\n      topLevelNode = node;\n    } else if (topLevelNode === null || topLevelNode !== null && $hasAncestor(node, topLevelNode)) {\n      descendants.push(node);\n    } else {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [node];\n    }\n  }\n  $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n}\n\n/**\n * Wraps each node into a new ElementNode.\n * @param selection - The selection of nodes to wrap.\n * @param nodes - An array of nodes, generally the descendants of the selection.\n * @param nodesLength - The length of nodes.\n * @param createElement - A function that creates the wrapping ElementNode. eg. $createParagraphNode.\n * @param wrappingElement - An element to wrap all the nodes into.\n * @returns\n */\nfunction $wrapNodesImpl(selection, nodes, nodesLength, createElement, wrappingElement = null) {\n  if (nodes.length === 0) {\n    return;\n  }\n  const firstNode = nodes[0];\n  const elementMapping = new Map();\n  const elements = [];\n  // The below logic is to find the right target for us to\n  // either insertAfter/insertBefore/append the corresponding\n  // elements to. This is made more complicated due to nested\n  // structures.\n  let target = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n  if (target.isInline()) {\n    target = target.getParentOrThrow();\n  }\n  let targetIsPrevSibling = false;\n  while (target !== null) {\n    const prevSibling = target.getPreviousSibling();\n    if (prevSibling !== null) {\n      target = prevSibling;\n      targetIsPrevSibling = true;\n      break;\n    }\n    target = target.getParentOrThrow();\n    if ($isRootOrShadowRoot(target)) {\n      break;\n    }\n  }\n  const emptyElements = new Set();\n\n  // Find any top level empty elements\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    if ($isElementNode(node) && node.getChildrenSize() === 0) {\n      emptyElements.add(node.getKey());\n    }\n  }\n  const movedNodes = new Set();\n\n  // Move out all leaf nodes into our elements array.\n  // If we find a top level empty element, also move make\n  // an element for that.\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    let parent = node.getParent();\n    if (parent !== null && parent.isInline()) {\n      parent = parent.getParent();\n    }\n    if (parent !== null && $isLeafNode(node) && !movedNodes.has(node.getKey())) {\n      const parentKey = parent.getKey();\n      if (elementMapping.get(parentKey) === undefined) {\n        const targetElement = createElement();\n        targetElement.setFormat(parent.getFormatType());\n        targetElement.setIndent(parent.getIndent());\n        elements.push(targetElement);\n        elementMapping.set(parentKey, targetElement);\n        // Move node and its siblings to the new\n        // element.\n        parent.getChildren().forEach(child => {\n          targetElement.append(child);\n          movedNodes.add(child.getKey());\n          if ($isElementNode(child)) {\n            // Skip nested leaf nodes if the parent has already been moved\n            child.getChildrenKeys().forEach(key => movedNodes.add(key));\n          }\n        });\n        $removeParentEmptyElements(parent);\n      }\n    } else if (emptyElements.has(node.getKey())) {\n      if (!$isElementNode(node)) {\n        throw Error(`Expected node in emptyElements to be an ElementNode`);\n      }\n      const targetElement = createElement();\n      targetElement.setFormat(node.getFormatType());\n      targetElement.setIndent(node.getIndent());\n      elements.push(targetElement);\n      node.remove(true);\n    }\n  }\n  if (wrappingElement !== null) {\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      wrappingElement.append(element);\n    }\n  }\n  let lastElement = null;\n\n  // If our target is Root-like, let's see if we can re-adjust\n  // so that the target is the first child instead.\n  if ($isRootOrShadowRoot(target)) {\n    if (targetIsPrevSibling) {\n      if (wrappingElement !== null) {\n        target.insertAfter(wrappingElement);\n      } else {\n        for (let i = elements.length - 1; i >= 0; i--) {\n          const element = elements[i];\n          target.insertAfter(element);\n        }\n      }\n    } else {\n      const firstChild = target.getFirstChild();\n      if ($isElementNode(firstChild)) {\n        target = firstChild;\n      }\n      if (firstChild === null) {\n        if (wrappingElement) {\n          target.append(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            target.append(element);\n            lastElement = element;\n          }\n        }\n      } else {\n        if (wrappingElement !== null) {\n          firstChild.insertBefore(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            firstChild.insertBefore(element);\n            lastElement = element;\n          }\n        }\n      }\n    }\n  } else {\n    if (wrappingElement) {\n      target.insertAfter(wrappingElement);\n    } else {\n      for (let i = elements.length - 1; i >= 0; i--) {\n        const element = elements[i];\n        target.insertAfter(element);\n        lastElement = element;\n      }\n    }\n  }\n  const prevSelection = $getPreviousSelection();\n  if ($isRangeSelection(prevSelection) && isPointAttached(prevSelection.anchor) && isPointAttached(prevSelection.focus)) {\n    $setSelection(prevSelection.clone());\n  } else if (lastElement !== null) {\n    lastElement.selectEnd();\n  } else {\n    selection.dirty = true;\n  }\n}\n\n/**\n * Determines if the default character selection should be overridden. Used with DecoratorNodes\n * @param selection - The selection whose default character selection may need to be overridden.\n * @param isBackward - Is the selection backwards (the focus comes before the anchor)?\n * @returns true if it should be overridden, false if not.\n */\nfunction $shouldOverrideDefaultCharacterSelection(selection, isBackward) {\n  const possibleNode = $getAdjacentNode(selection.focus, isBackward);\n  return $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() || $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty();\n}\n\n/**\n * Moves the selection according to the arguments.\n * @param selection - The selected text or nodes.\n * @param isHoldingShift - Is the shift key being held down during the operation.\n * @param isBackward - Is the selection selected backwards (the focus comes before the anchor)?\n * @param granularity - The distance to adjust the current selection.\n */\nfunction $moveCaretSelection(selection, isHoldingShift, isBackward, granularity) {\n  selection.modify(isHoldingShift ? 'extend' : 'move', isBackward, granularity);\n}\n\n/**\n * Tests a parent element for right to left direction.\n * @param selection - The selection whose parent is to be tested.\n * @returns true if the selections' parent element has a direction of 'rtl' (right to left), false otherwise.\n */\nfunction $isParentElementRTL(selection) {\n  const anchorNode = selection.anchor.getNode();\n  const parent = $isRootNode(anchorNode) ? anchorNode : anchorNode.getParentOrThrow();\n  return parent.getDirection() === 'rtl';\n}\n\n/**\n * Moves selection by character according to arguments.\n * @param selection - The selection of the characters to move.\n * @param isHoldingShift - Is the shift key being held down during the operation.\n * @param isBackward - Is the selection backward (the focus comes before the anchor)?\n */\nfunction $moveCharacter(selection, isHoldingShift, isBackward) {\n  const isRTL = $isParentElementRTL(selection);\n  $moveCaretSelection(selection, isHoldingShift, isBackward ? !isRTL : isRTL, 'character');\n}\n\n/**\n * Returns the current value of a CSS property for Nodes, if set. If not set, it returns the defaultValue.\n * @param node - The node whose style value to get.\n * @param styleProperty - The CSS style property.\n * @param defaultValue - The default value for the property.\n * @returns The value of the property for node.\n */\nfunction $getNodeStyleValueForProperty(node, styleProperty, defaultValue) {\n  const css = node.getStyle();\n  const styleObject = getStyleObjectFromCSS(css);\n  if (styleObject !== null) {\n    return styleObject[styleProperty] || defaultValue;\n  }\n  return defaultValue;\n}\n\n/**\n * Returns the current value of a CSS property for TextNodes in the Selection, if set. If not set, it returns the defaultValue.\n * If all TextNodes do not have the same value, it returns an empty string.\n * @param selection - The selection of TextNodes whose value to find.\n * @param styleProperty - The CSS style property.\n * @param defaultValue - The default value for the property, defaults to an empty string.\n * @returns The value of the property for the selected TextNodes.\n */\nfunction $getSelectionStyleValueForProperty(selection, styleProperty, defaultValue = '') {\n  let styleValue = null;\n  const nodes = selection.getNodes();\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const isBackward = selection.isBackward();\n  const endOffset = isBackward ? focus.offset : anchor.offset;\n  const endNode = isBackward ? focus.getNode() : anchor.getNode();\n  if ($isRangeSelection(selection) && selection.isCollapsed() && selection.style !== '') {\n    const css = selection.style;\n    const styleObject = getStyleObjectFromCSS(css);\n    if (styleObject !== null && styleProperty in styleObject) {\n      return styleObject[styleProperty];\n    }\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    // if no actual characters in the end node are selected, we don't\n    // include it in the selection for purposes of determining style\n    // value\n    if (i !== 0 && endOffset === 0 && node.is(endNode)) {\n      continue;\n    }\n    if ($isTextNode(node)) {\n      const nodeStyleValue = $getNodeStyleValueForProperty(node, styleProperty, defaultValue);\n      if (styleValue === null) {\n        styleValue = nodeStyleValue;\n      } else if (styleValue !== nodeStyleValue) {\n        // multiple text nodes are in the selection and they don't all\n        // have the same style.\n        styleValue = '';\n        break;\n      }\n    }\n  }\n  return styleValue === null ? defaultValue : styleValue;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isDecoratorNode(node)) {\n    return false;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @deprecated renamed to {@link $trimTextContentFromAnchor} by @lexical/eslint-plugin rules-of-lexical */\nconst trimTextContentFromAnchor = $trimTextContentFromAnchor;\nexport { $addNodeStyle, $forEachSelectedTextNode, $getSelectionStyleValueForProperty, $isAtNodeEnd, $isParentElementRTL, $moveCaretSelection, $moveCharacter, $patchStyleText, $setBlocksType, $shouldOverrideDefaultCharacterSelection, $sliceSelectedTextNodeContent, $trimTextContentFromAnchor, $wrapNodes, createDOMRange, createRectsFromDOMRange, getCSSFromStyleObject, getStyleObjectFromCSS, trimTextContentFromAnchor };","map":{"version":3,"names":["$isTextNode","$getCharacterOffsets","$isElementNode","$isRootNode","$getNodeByKey","$getPreviousSelection","$createTextNode","$isRangeSelection","$getSelection","$isTokenOrSegmented","$getRoot","$isRootOrShadowRoot","$hasAncestor","$isLeafNode","$setSelection","$getAdjacentNode","$isDecoratorNode","$isLineBreakNode","$cloneWithProperties","$selectAll","CSS_TO_STYLES","Map","getDOMTextNode","element","node","nodeType","Node","TEXT_NODE","firstChild","getDOMIndexWithinParent","parent","parentNode","Error","Array","from","childNodes","indexOf","createDOMRange","editor","anchorNode","_anchorOffset","focusNode","_focusOffset","anchorKey","getKey","focusKey","range","document","createRange","anchorDOM","getElementByKey","focusDOM","anchorOffset","focusOffset","undefined","nodeName","setStart","setEnd","e","collapsed","createRectsFromDOMRange","rootElement","getRootElement","rootRect","getBoundingClientRect","computedStyle","getComputedStyle","rootPadding","parseFloat","paddingLeft","paddingRight","selectionRects","getClientRects","selectionRectsLength","length","sort","a","b","top","Math","abs","left","prevRect","i","selectionRect","isOverlappingRect","height","width","selectionSpansElement","splice","getStyleObjectFromRawCSS","css","styleObject","styles","split","style","key","value","trim","getStyleObjectFromCSS","get","set","Object","freeze","getCSSFromStyleObject","$sliceSelectedTextNodeContent","selection","textNode","anchorAndFocus","getStartEndPoints","isSelected","isSegmented","isToken","anchor","focus","isBackward","getNode","isAnchor","is","isFocus","isSame","isFirst","isLast","startOffset","endOffset","offset","__text","slice","$isAtNodeEnd","point","type","getTextContentSize","getChildrenSize","$trimTextContentFromAnchor","delCount","currentNode","remaining","descendantNode","getDescendantByIndex","lastDescendant","getLastDescendant","nextNode","getPreviousSibling","additionalElementWhitespace","getParentOrThrow","parentSibling","getParent","isInline","text","getTextContent","currentNodeSize","remove","prevTextContent","getEditorState","read","prevNode","isSimpleText","slicedText","prevSelection","target","replace","setTextContent","isCollapsed","prevOffset","select","splitStart","splitEnd","excessNode","splitText","$addNodeStyle","CSSText","getStyle","$patchStyle","patch","prevStyles","newStyles","entries","reduce","newCSSText","setStyle","$patchStyleText","$forEachSelectedTextNode","fn","selectedNodes","getNodes","selectedNodesLength","lastIndex","firstNode","lastNode","firstNodeText","firstNodeTextLength","isBefore","startType","endType","endKey","nextSibling","getNextSibling","canHaveFormat","splitNodes","replacement","lastNodeText","lastNodeTextLength","__key","selectedNode","selectedNodeKey","$setBlocksType","createElement","root","getFirstChild","append","nodes","firstSelectedBlock","$getAncestor","INTERNAL_$isBlock","push","targetElement","setFormat","getFormatType","setIndent","getIndent","isPointAttached","isAttached","$removeParentEmptyElements","startingNode","latest","getLatest","$wrapNodes","wrappingElement","nodesLength","children","getChildren","forEach","child","topLevelNode","descendants","$wrapNodesImpl","elementMapping","elements","targetIsPrevSibling","prevSibling","emptyElements","Set","add","movedNodes","has","parentKey","getChildrenKeys","lastElement","insertAfter","insertBefore","clone","selectEnd","dirty","$shouldOverrideDefaultCharacterSelection","possibleNode","isIsolated","canBeEmpty","$moveCaretSelection","isHoldingShift","granularity","modify","$isParentElementRTL","getDirection","$moveCharacter","isRTL","$getNodeStyleValueForProperty","styleProperty","defaultValue","$getSelectionStyleValueForProperty","styleValue","endNode","nodeStyleValue","isLeafElement","predicate","trimTextContentFromAnchor"],"sources":["/Users/Matt.Ratliff/Development/lexical-sandbox/node_modules/@lexical/selection/LexicalSelection.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $isTextNode, $getCharacterOffsets, $isElementNode, $isRootNode, $getNodeByKey, $getPreviousSelection, $createTextNode, $isRangeSelection, $getSelection, $isTokenOrSegmented, $getRoot, $isRootOrShadowRoot, $hasAncestor, $isLeafNode, $setSelection, $getAdjacentNode, $isDecoratorNode, $isLineBreakNode } from 'lexical';\nexport { $cloneWithProperties, $selectAll } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CSS_TO_STYLES = new Map();\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction getDOMIndexWithinParent(node) {\n  const parent = node.parentNode;\n  if (parent == null) {\n    throw new Error('Should never happen');\n  }\n  return [parent, Array.from(parent.childNodes).indexOf(node)];\n}\n\n/**\n * Creates a selection range for the DOM.\n * @param editor - The lexical editor.\n * @param anchorNode - The anchor node of a selection.\n * @param _anchorOffset - The amount of space offset from the anchor to the focus.\n * @param focusNode - The current focus.\n * @param _focusOffset - The amount of space offset from the focus to the anchor.\n * @returns The range of selection for the DOM that was created.\n */\nfunction createDOMRange(editor, anchorNode, _anchorOffset, focusNode, _focusOffset) {\n  const anchorKey = anchorNode.getKey();\n  const focusKey = focusNode.getKey();\n  const range = document.createRange();\n  let anchorDOM = editor.getElementByKey(anchorKey);\n  let focusDOM = editor.getElementByKey(focusKey);\n  let anchorOffset = _anchorOffset;\n  let focusOffset = _focusOffset;\n  if ($isTextNode(anchorNode)) {\n    anchorDOM = getDOMTextNode(anchorDOM);\n  }\n  if ($isTextNode(focusNode)) {\n    focusDOM = getDOMTextNode(focusDOM);\n  }\n  if (anchorNode === undefined || focusNode === undefined || anchorDOM === null || focusDOM === null) {\n    return null;\n  }\n  if (anchorDOM.nodeName === 'BR') {\n    [anchorDOM, anchorOffset] = getDOMIndexWithinParent(anchorDOM);\n  }\n  if (focusDOM.nodeName === 'BR') {\n    [focusDOM, focusOffset] = getDOMIndexWithinParent(focusDOM);\n  }\n  const firstChild = anchorDOM.firstChild;\n  if (anchorDOM === focusDOM && firstChild != null && firstChild.nodeName === 'BR' && anchorOffset === 0 && focusOffset === 0) {\n    focusOffset = 1;\n  }\n  try {\n    range.setStart(anchorDOM, anchorOffset);\n    range.setEnd(focusDOM, focusOffset);\n  } catch (e) {\n    return null;\n  }\n  if (range.collapsed && (anchorOffset !== focusOffset || anchorKey !== focusKey)) {\n    // Range is backwards, we need to reverse it\n    range.setStart(focusDOM, focusOffset);\n    range.setEnd(anchorDOM, anchorOffset);\n  }\n  return range;\n}\n\n/**\n * Creates DOMRects, generally used to help the editor find a specific location on the screen.\n * @param editor - The lexical editor\n * @param range - A fragment of a document that can contain nodes and parts of text nodes.\n * @returns The selectionRects as an array.\n */\nfunction createRectsFromDOMRange(editor, range) {\n  const rootElement = editor.getRootElement();\n  if (rootElement === null) {\n    return [];\n  }\n  const rootRect = rootElement.getBoundingClientRect();\n  const computedStyle = getComputedStyle(rootElement);\n  const rootPadding = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n  const selectionRects = Array.from(range.getClientRects());\n  let selectionRectsLength = selectionRects.length;\n  //sort rects from top left to bottom right.\n  selectionRects.sort((a, b) => {\n    const top = a.top - b.top;\n    // Some rects match position closely, but not perfectly,\n    // so we give a 3px tolerance.\n    if (Math.abs(top) <= 3) {\n      return a.left - b.left;\n    }\n    return top;\n  });\n  let prevRect;\n  for (let i = 0; i < selectionRectsLength; i++) {\n    const selectionRect = selectionRects[i];\n    // Exclude rects that overlap preceding Rects in the sorted list.\n    const isOverlappingRect = prevRect && prevRect.top <= selectionRect.top && prevRect.top + prevRect.height > selectionRect.top && prevRect.left + prevRect.width > selectionRect.left;\n    // Exclude selections that span the entire element\n    const selectionSpansElement = selectionRect.width + rootPadding === rootRect.width;\n    if (isOverlappingRect || selectionSpansElement) {\n      selectionRects.splice(i--, 1);\n      selectionRectsLength--;\n      continue;\n    }\n    prevRect = selectionRect;\n  }\n  return selectionRects;\n}\n\n/**\n * Creates an object containing all the styles and their values provided in the CSS string.\n * @param css - The CSS string of styles and their values.\n * @returns The styleObject containing all the styles and their values.\n */\nfunction getStyleObjectFromRawCSS(css) {\n  const styleObject = {};\n  if (!css) {\n    return styleObject;\n  }\n  const styles = css.split(';');\n  for (const style of styles) {\n    if (style !== '') {\n      const [key, value] = style.split(/:([^]+)/); // split on first colon\n      if (key && value) {\n        styleObject[key.trim()] = value.trim();\n      }\n    }\n  }\n  return styleObject;\n}\n\n/**\n * Given a CSS string, returns an object from the style cache.\n * @param css - The CSS property as a string.\n * @returns The value of the given CSS property.\n */\nfunction getStyleObjectFromCSS(css) {\n  let value = CSS_TO_STYLES.get(css);\n  if (value === undefined) {\n    value = getStyleObjectFromRawCSS(css);\n    CSS_TO_STYLES.set(css, value);\n  }\n  {\n    // Freeze the value in DEV to prevent accidental mutations\n    Object.freeze(value);\n  }\n  return value;\n}\n\n/**\n * Gets the CSS styles from the style object.\n * @param styles - The style object containing the styles to get.\n * @returns A string containing the CSS styles and their values.\n */\nfunction getCSSFromStyleObject(styles) {\n  let css = '';\n  for (const style in styles) {\n    if (style) {\n      css += `${style}: ${styles[style]};`;\n    }\n  }\n  return css;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Generally used to append text content to HTML and JSON. Grabs the text content and \"slices\"\n * it to be generated into the new TextNode.\n * @param selection - The selection containing the node whose TextNode is to be edited.\n * @param textNode - The TextNode to be edited.\n * @returns The updated TextNode.\n */\nfunction $sliceSelectedTextNodeContent(selection, textNode) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (textNode.isSelected(selection) && !textNode.isSegmented() && !textNode.isToken() && anchorAndFocus !== null) {\n    const [anchor, focus] = anchorAndFocus;\n    const isBackward = selection.isBackward();\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    const isAnchor = textNode.is(anchorNode);\n    const isFocus = textNode.is(focusNode);\n    if (isAnchor || isFocus) {\n      const [anchorOffset, focusOffset] = $getCharacterOffsets(selection);\n      const isSame = anchorNode.is(focusNode);\n      const isFirst = textNode.is(isBackward ? focusNode : anchorNode);\n      const isLast = textNode.is(isBackward ? anchorNode : focusNode);\n      let startOffset = 0;\n      let endOffset = undefined;\n      if (isSame) {\n        startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n      } else if (isFirst) {\n        const offset = isBackward ? focusOffset : anchorOffset;\n        startOffset = offset;\n        endOffset = undefined;\n      } else if (isLast) {\n        const offset = isBackward ? anchorOffset : focusOffset;\n        startOffset = 0;\n        endOffset = offset;\n      }\n      textNode.__text = textNode.__text.slice(startOffset, endOffset);\n      return textNode;\n    }\n  }\n  return textNode;\n}\n\n/**\n * Determines if the current selection is at the end of the node.\n * @param point - The point of the selection to test.\n * @returns true if the provided point offset is in the last possible position, false otherwise.\n */\nfunction $isAtNodeEnd(point) {\n  if (point.type === 'text') {\n    return point.offset === point.getNode().getTextContentSize();\n  }\n  const node = point.getNode();\n  if (!$isElementNode(node)) {\n    throw Error(`isAtNodeEnd: node must be a TextNode or ElementNode`);\n  }\n  return point.offset === node.getChildrenSize();\n}\n\n/**\n * Trims text from a node in order to shorten it, eg. to enforce a text's max length. If it deletes text\n * that is an ancestor of the anchor then it will leave 2 indents, otherwise, if no text content exists, it deletes\n * the TextNode. It will move the focus to either the end of any left over text or beginning of a new TextNode.\n * @param editor - The lexical editor.\n * @param anchor - The anchor of the current selection, where the selection should be pointing.\n * @param delCount - The amount of characters to delete. Useful as a dynamic variable eg. textContentSize - maxLength;\n */\nfunction $trimTextContentFromAnchor(editor, anchor, delCount) {\n  // Work from the current selection anchor point\n  let currentNode = anchor.getNode();\n  let remaining = delCount;\n  if ($isElementNode(currentNode)) {\n    const descendantNode = currentNode.getDescendantByIndex(anchor.offset);\n    if (descendantNode !== null) {\n      currentNode = descendantNode;\n    }\n  }\n  while (remaining > 0 && currentNode !== null) {\n    if ($isElementNode(currentNode)) {\n      const lastDescendant = currentNode.getLastDescendant();\n      if (lastDescendant !== null) {\n        currentNode = lastDescendant;\n      }\n    }\n    let nextNode = currentNode.getPreviousSibling();\n    let additionalElementWhitespace = 0;\n    if (nextNode === null) {\n      let parent = currentNode.getParentOrThrow();\n      let parentSibling = parent.getPreviousSibling();\n      while (parentSibling === null) {\n        parent = parent.getParent();\n        if (parent === null) {\n          nextNode = null;\n          break;\n        }\n        parentSibling = parent.getPreviousSibling();\n      }\n      if (parent !== null) {\n        additionalElementWhitespace = parent.isInline() ? 0 : 2;\n        nextNode = parentSibling;\n      }\n    }\n    let text = currentNode.getTextContent();\n    // If the text is empty, we need to consider adding in two line breaks to match\n    // the content if we were to get it from its parent.\n    if (text === '' && $isElementNode(currentNode) && !currentNode.isInline()) {\n      // TODO: should this be handled in core?\n      text = '\\n\\n';\n    }\n    const currentNodeSize = text.length;\n    if (!$isTextNode(currentNode) || remaining >= currentNodeSize) {\n      const parent = currentNode.getParent();\n      currentNode.remove();\n      if (parent != null && parent.getChildrenSize() === 0 && !$isRootNode(parent)) {\n        parent.remove();\n      }\n      remaining -= currentNodeSize + additionalElementWhitespace;\n      currentNode = nextNode;\n    } else {\n      const key = currentNode.getKey();\n      // See if we can just revert it to what was in the last editor state\n      const prevTextContent = editor.getEditorState().read(() => {\n        const prevNode = $getNodeByKey(key);\n        if ($isTextNode(prevNode) && prevNode.isSimpleText()) {\n          return prevNode.getTextContent();\n        }\n        return null;\n      });\n      const offset = currentNodeSize - remaining;\n      const slicedText = text.slice(0, offset);\n      if (prevTextContent !== null && prevTextContent !== text) {\n        const prevSelection = $getPreviousSelection();\n        let target = currentNode;\n        if (!currentNode.isSimpleText()) {\n          const textNode = $createTextNode(prevTextContent);\n          currentNode.replace(textNode);\n          target = textNode;\n        } else {\n          currentNode.setTextContent(prevTextContent);\n        }\n        if ($isRangeSelection(prevSelection) && prevSelection.isCollapsed()) {\n          const prevOffset = prevSelection.anchor.offset;\n          target.select(prevOffset, prevOffset);\n        }\n      } else if (currentNode.isSimpleText()) {\n        // Split text\n        const isSelected = anchor.key === key;\n        let anchorOffset = anchor.offset;\n        // Move offset to end if it's less than the remaining number, otherwise\n        // we'll have a negative splitStart.\n        if (anchorOffset < remaining) {\n          anchorOffset = currentNodeSize;\n        }\n        const splitStart = isSelected ? anchorOffset - remaining : 0;\n        const splitEnd = isSelected ? anchorOffset : offset;\n        if (isSelected && splitStart === 0) {\n          const [excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        } else {\n          const [, excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        }\n      } else {\n        const textNode = $createTextNode(slicedText);\n        currentNode.replace(textNode);\n      }\n      remaining = 0;\n    }\n  }\n}\n\n/**\n * Gets the TextNode's style object and adds the styles to the CSS.\n * @param node - The TextNode to add styles to.\n */\nfunction $addNodeStyle(node) {\n  const CSSText = node.getStyle();\n  const styles = getStyleObjectFromRawCSS(CSSText);\n  CSS_TO_STYLES.set(CSSText, styles);\n}\nfunction $patchStyle(target, patch) {\n  const prevStyles = getStyleObjectFromCSS('getStyle' in target ? target.getStyle() : target.style);\n  const newStyles = Object.entries(patch).reduce((styles, [key, value]) => {\n    if (typeof value === 'function') {\n      styles[key] = value(prevStyles[key], target);\n    } else if (value === null) {\n      delete styles[key];\n    } else {\n      styles[key] = value;\n    }\n    return styles;\n  }, {\n    ...prevStyles\n  } || {});\n  const newCSSText = getCSSFromStyleObject(newStyles);\n  target.setStyle(newCSSText);\n  CSS_TO_STYLES.set(newCSSText, newStyles);\n}\n\n/**\n * Applies the provided styles to the TextNodes in the provided Selection.\n * Will update partially selected TextNodes by splitting the TextNode and applying\n * the styles to the appropriate one.\n * @param selection - The selected node(s) to update.\n * @param patch - The patch to apply, which can include multiple styles. \\\\{CSSProperty: value\\\\} . Can also accept a function that returns the new property value.\n */\nfunction $patchStyleText(selection, patch) {\n  if (selection.isCollapsed() && $isRangeSelection(selection)) {\n    $patchStyle(selection, patch);\n  } else {\n    $forEachSelectedTextNode(textNode => {\n      $patchStyle(textNode, patch);\n    });\n  }\n}\nfunction $forEachSelectedTextNode(fn) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return;\n  }\n  const selectedNodes = selection.getNodes();\n  const selectedNodesLength = selectedNodes.length;\n  const {\n    anchor,\n    focus\n  } = selection;\n  const lastIndex = selectedNodesLength - 1;\n  let firstNode = selectedNodes[0];\n  let lastNode = selectedNodes[lastIndex];\n  const firstNodeText = firstNode.getTextContent();\n  const firstNodeTextLength = firstNodeText.length;\n  const focusOffset = focus.offset;\n  let anchorOffset = anchor.offset;\n  const isBefore = anchor.isBefore(focus);\n  let startOffset = isBefore ? anchorOffset : focusOffset;\n  let endOffset = isBefore ? focusOffset : anchorOffset;\n  const startType = isBefore ? anchor.type : focus.type;\n  const endType = isBefore ? focus.type : anchor.type;\n  const endKey = isBefore ? focus.key : anchor.key;\n\n  // This is the case where the user only selected the very end of the\n  // first node so we don't want to include it in the formatting change.\n  if ($isTextNode(firstNode) && startOffset === firstNodeTextLength) {\n    const nextSibling = firstNode.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      // we basically make the second node the firstNode, changing offsets accordingly\n      anchorOffset = 0;\n      startOffset = 0;\n      firstNode = nextSibling;\n    }\n  }\n\n  // This is the case where we only selected a single node\n  if (selectedNodes.length === 1) {\n    if ($isTextNode(firstNode) && firstNode.canHaveFormat()) {\n      startOffset = startType === 'element' ? 0 : anchorOffset > focusOffset ? focusOffset : anchorOffset;\n      endOffset = endType === 'element' ? firstNodeTextLength : anchorOffset > focusOffset ? anchorOffset : focusOffset;\n\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n\n      // The entire node is selected or a token/segment, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNodeTextLength) {\n        fn(firstNode);\n        firstNode.select(startOffset, endOffset);\n      } else {\n        // The node is partially selected, so split it into two nodes\n        // and style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        fn(replacement);\n        replacement.select(0, endOffset - startOffset);\n      }\n    } // multiple nodes selected.\n  } else {\n    if ($isTextNode(firstNode) && startOffset < firstNode.getTextContentSize() && firstNode.canHaveFormat()) {\n      if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n        // the entire first node isn't selected and it isn't a token or segmented, so split it\n        firstNode = firstNode.splitText(startOffset)[1];\n        startOffset = 0;\n        if (isBefore) {\n          anchor.set(firstNode.getKey(), startOffset, 'text');\n        } else {\n          focus.set(firstNode.getKey(), startOffset, 'text');\n        }\n      }\n      fn(firstNode);\n    }\n    if ($isTextNode(lastNode) && lastNode.canHaveFormat()) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n\n      // The last node might not actually be the end node\n      //\n      // If not, assume the last node is fully-selected unless the end offset is\n      // zero.\n      if (lastNode.__key !== endKey && endOffset !== 0) {\n        endOffset = lastNodeTextLength;\n      }\n\n      // if the entire last node isn't selected and it isn't a token or segmented, split it\n      if (endOffset !== lastNodeTextLength && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      if (endOffset !== 0 || endType === 'element') {\n        fn(lastNode);\n      }\n    }\n\n    // style all the text nodes in between\n    for (let i = 1; i < lastIndex; i++) {\n      const selectedNode = selectedNodes[i];\n      const selectedNodeKey = selectedNode.getKey();\n      if ($isTextNode(selectedNode) && selectedNode.canHaveFormat() && selectedNodeKey !== firstNode.getKey() && selectedNodeKey !== lastNode.getKey() && !selectedNode.isToken()) {\n        fn(selectedNode);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/**\n * Converts all nodes in the selection that are of one block type to another.\n * @param selection - The selected blocks to be converted.\n * @param createElement - The function that creates the node. eg. $createParagraphNode.\n */\nfunction $setBlocksType(selection, createElement) {\n  if (selection === null) {\n    return;\n  }\n  const anchorAndFocus = selection.getStartEndPoints();\n  const anchor = anchorAndFocus ? anchorAndFocus[0] : null;\n  if (anchor !== null && anchor.key === 'root') {\n    const element = createElement();\n    const root = $getRoot();\n    const firstChild = root.getFirstChild();\n    if (firstChild) {\n      firstChild.replace(element, true);\n    } else {\n      root.append(element);\n    }\n    return;\n  }\n  const nodes = selection.getNodes();\n  const firstSelectedBlock = anchor !== null ? $getAncestor(anchor.getNode(), INTERNAL_$isBlock) : false;\n  if (firstSelectedBlock && nodes.indexOf(firstSelectedBlock) === -1) {\n    nodes.push(firstSelectedBlock);\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!INTERNAL_$isBlock(node)) {\n      continue;\n    }\n    if (!$isElementNode(node)) {\n      throw Error(`Expected block node to be an ElementNode`);\n    }\n    const targetElement = createElement();\n    targetElement.setFormat(node.getFormatType());\n    targetElement.setIndent(node.getIndent());\n    node.replace(targetElement, true);\n  }\n}\nfunction isPointAttached(point) {\n  return point.getNode().isAttached();\n}\nfunction $removeParentEmptyElements(startingNode) {\n  let node = startingNode;\n  while (node !== null && !$isRootOrShadowRoot(node)) {\n    const latest = node.getLatest();\n    const parentNode = node.getParent();\n    if (latest.getChildrenSize() === 0) {\n      node.remove(true);\n    }\n    node = parentNode;\n  }\n}\n\n/**\n * @deprecated\n * Wraps all nodes in the selection into another node of the type returned by createElement.\n * @param selection - The selection of nodes to be wrapped.\n * @param createElement - A function that creates the wrapping ElementNode. eg. $createParagraphNode.\n * @param wrappingElement - An element to append the wrapped selection and its children to.\n */\nfunction $wrapNodes(selection, createElement, wrappingElement = null) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  const anchor = anchorAndFocus ? anchorAndFocus[0] : null;\n  const nodes = selection.getNodes();\n  const nodesLength = nodes.length;\n  if (anchor !== null && (nodesLength === 0 || nodesLength === 1 && anchor.type === 'element' && anchor.getNode().getChildrenSize() === 0)) {\n    const target = anchor.type === 'text' ? anchor.getNode().getParentOrThrow() : anchor.getNode();\n    const children = target.getChildren();\n    let element = createElement();\n    element.setFormat(target.getFormatType());\n    element.setIndent(target.getIndent());\n    children.forEach(child => element.append(child));\n    if (wrappingElement) {\n      element = wrappingElement.append(element);\n    }\n    target.replace(element);\n    return;\n  }\n  let topLevelNode = null;\n  let descendants = [];\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    // Determine whether wrapping has to be broken down into multiple chunks. This can happen if the\n    // user selected multiple Root-like nodes that have to be treated separately as if they are\n    // their own branch. I.e. you don't want to wrap a whole table, but rather the contents of each\n    // of each of the cell nodes.\n    if ($isRootOrShadowRoot(node)) {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [];\n      topLevelNode = node;\n    } else if (topLevelNode === null || topLevelNode !== null && $hasAncestor(node, topLevelNode)) {\n      descendants.push(node);\n    } else {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [node];\n    }\n  }\n  $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n}\n\n/**\n * Wraps each node into a new ElementNode.\n * @param selection - The selection of nodes to wrap.\n * @param nodes - An array of nodes, generally the descendants of the selection.\n * @param nodesLength - The length of nodes.\n * @param createElement - A function that creates the wrapping ElementNode. eg. $createParagraphNode.\n * @param wrappingElement - An element to wrap all the nodes into.\n * @returns\n */\nfunction $wrapNodesImpl(selection, nodes, nodesLength, createElement, wrappingElement = null) {\n  if (nodes.length === 0) {\n    return;\n  }\n  const firstNode = nodes[0];\n  const elementMapping = new Map();\n  const elements = [];\n  // The below logic is to find the right target for us to\n  // either insertAfter/insertBefore/append the corresponding\n  // elements to. This is made more complicated due to nested\n  // structures.\n  let target = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n  if (target.isInline()) {\n    target = target.getParentOrThrow();\n  }\n  let targetIsPrevSibling = false;\n  while (target !== null) {\n    const prevSibling = target.getPreviousSibling();\n    if (prevSibling !== null) {\n      target = prevSibling;\n      targetIsPrevSibling = true;\n      break;\n    }\n    target = target.getParentOrThrow();\n    if ($isRootOrShadowRoot(target)) {\n      break;\n    }\n  }\n  const emptyElements = new Set();\n\n  // Find any top level empty elements\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    if ($isElementNode(node) && node.getChildrenSize() === 0) {\n      emptyElements.add(node.getKey());\n    }\n  }\n  const movedNodes = new Set();\n\n  // Move out all leaf nodes into our elements array.\n  // If we find a top level empty element, also move make\n  // an element for that.\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    let parent = node.getParent();\n    if (parent !== null && parent.isInline()) {\n      parent = parent.getParent();\n    }\n    if (parent !== null && $isLeafNode(node) && !movedNodes.has(node.getKey())) {\n      const parentKey = parent.getKey();\n      if (elementMapping.get(parentKey) === undefined) {\n        const targetElement = createElement();\n        targetElement.setFormat(parent.getFormatType());\n        targetElement.setIndent(parent.getIndent());\n        elements.push(targetElement);\n        elementMapping.set(parentKey, targetElement);\n        // Move node and its siblings to the new\n        // element.\n        parent.getChildren().forEach(child => {\n          targetElement.append(child);\n          movedNodes.add(child.getKey());\n          if ($isElementNode(child)) {\n            // Skip nested leaf nodes if the parent has already been moved\n            child.getChildrenKeys().forEach(key => movedNodes.add(key));\n          }\n        });\n        $removeParentEmptyElements(parent);\n      }\n    } else if (emptyElements.has(node.getKey())) {\n      if (!$isElementNode(node)) {\n        throw Error(`Expected node in emptyElements to be an ElementNode`);\n      }\n      const targetElement = createElement();\n      targetElement.setFormat(node.getFormatType());\n      targetElement.setIndent(node.getIndent());\n      elements.push(targetElement);\n      node.remove(true);\n    }\n  }\n  if (wrappingElement !== null) {\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      wrappingElement.append(element);\n    }\n  }\n  let lastElement = null;\n\n  // If our target is Root-like, let's see if we can re-adjust\n  // so that the target is the first child instead.\n  if ($isRootOrShadowRoot(target)) {\n    if (targetIsPrevSibling) {\n      if (wrappingElement !== null) {\n        target.insertAfter(wrappingElement);\n      } else {\n        for (let i = elements.length - 1; i >= 0; i--) {\n          const element = elements[i];\n          target.insertAfter(element);\n        }\n      }\n    } else {\n      const firstChild = target.getFirstChild();\n      if ($isElementNode(firstChild)) {\n        target = firstChild;\n      }\n      if (firstChild === null) {\n        if (wrappingElement) {\n          target.append(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            target.append(element);\n            lastElement = element;\n          }\n        }\n      } else {\n        if (wrappingElement !== null) {\n          firstChild.insertBefore(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            firstChild.insertBefore(element);\n            lastElement = element;\n          }\n        }\n      }\n    }\n  } else {\n    if (wrappingElement) {\n      target.insertAfter(wrappingElement);\n    } else {\n      for (let i = elements.length - 1; i >= 0; i--) {\n        const element = elements[i];\n        target.insertAfter(element);\n        lastElement = element;\n      }\n    }\n  }\n  const prevSelection = $getPreviousSelection();\n  if ($isRangeSelection(prevSelection) && isPointAttached(prevSelection.anchor) && isPointAttached(prevSelection.focus)) {\n    $setSelection(prevSelection.clone());\n  } else if (lastElement !== null) {\n    lastElement.selectEnd();\n  } else {\n    selection.dirty = true;\n  }\n}\n\n/**\n * Determines if the default character selection should be overridden. Used with DecoratorNodes\n * @param selection - The selection whose default character selection may need to be overridden.\n * @param isBackward - Is the selection backwards (the focus comes before the anchor)?\n * @returns true if it should be overridden, false if not.\n */\nfunction $shouldOverrideDefaultCharacterSelection(selection, isBackward) {\n  const possibleNode = $getAdjacentNode(selection.focus, isBackward);\n  return $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() || $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty();\n}\n\n/**\n * Moves the selection according to the arguments.\n * @param selection - The selected text or nodes.\n * @param isHoldingShift - Is the shift key being held down during the operation.\n * @param isBackward - Is the selection selected backwards (the focus comes before the anchor)?\n * @param granularity - The distance to adjust the current selection.\n */\nfunction $moveCaretSelection(selection, isHoldingShift, isBackward, granularity) {\n  selection.modify(isHoldingShift ? 'extend' : 'move', isBackward, granularity);\n}\n\n/**\n * Tests a parent element for right to left direction.\n * @param selection - The selection whose parent is to be tested.\n * @returns true if the selections' parent element has a direction of 'rtl' (right to left), false otherwise.\n */\nfunction $isParentElementRTL(selection) {\n  const anchorNode = selection.anchor.getNode();\n  const parent = $isRootNode(anchorNode) ? anchorNode : anchorNode.getParentOrThrow();\n  return parent.getDirection() === 'rtl';\n}\n\n/**\n * Moves selection by character according to arguments.\n * @param selection - The selection of the characters to move.\n * @param isHoldingShift - Is the shift key being held down during the operation.\n * @param isBackward - Is the selection backward (the focus comes before the anchor)?\n */\nfunction $moveCharacter(selection, isHoldingShift, isBackward) {\n  const isRTL = $isParentElementRTL(selection);\n  $moveCaretSelection(selection, isHoldingShift, isBackward ? !isRTL : isRTL, 'character');\n}\n\n/**\n * Returns the current value of a CSS property for Nodes, if set. If not set, it returns the defaultValue.\n * @param node - The node whose style value to get.\n * @param styleProperty - The CSS style property.\n * @param defaultValue - The default value for the property.\n * @returns The value of the property for node.\n */\nfunction $getNodeStyleValueForProperty(node, styleProperty, defaultValue) {\n  const css = node.getStyle();\n  const styleObject = getStyleObjectFromCSS(css);\n  if (styleObject !== null) {\n    return styleObject[styleProperty] || defaultValue;\n  }\n  return defaultValue;\n}\n\n/**\n * Returns the current value of a CSS property for TextNodes in the Selection, if set. If not set, it returns the defaultValue.\n * If all TextNodes do not have the same value, it returns an empty string.\n * @param selection - The selection of TextNodes whose value to find.\n * @param styleProperty - The CSS style property.\n * @param defaultValue - The default value for the property, defaults to an empty string.\n * @returns The value of the property for the selected TextNodes.\n */\nfunction $getSelectionStyleValueForProperty(selection, styleProperty, defaultValue = '') {\n  let styleValue = null;\n  const nodes = selection.getNodes();\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const isBackward = selection.isBackward();\n  const endOffset = isBackward ? focus.offset : anchor.offset;\n  const endNode = isBackward ? focus.getNode() : anchor.getNode();\n  if ($isRangeSelection(selection) && selection.isCollapsed() && selection.style !== '') {\n    const css = selection.style;\n    const styleObject = getStyleObjectFromCSS(css);\n    if (styleObject !== null && styleProperty in styleObject) {\n      return styleObject[styleProperty];\n    }\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    // if no actual characters in the end node are selected, we don't\n    // include it in the selection for purposes of determining style\n    // value\n    if (i !== 0 && endOffset === 0 && node.is(endNode)) {\n      continue;\n    }\n    if ($isTextNode(node)) {\n      const nodeStyleValue = $getNodeStyleValueForProperty(node, styleProperty, defaultValue);\n      if (styleValue === null) {\n        styleValue = nodeStyleValue;\n      } else if (styleValue !== nodeStyleValue) {\n        // multiple text nodes are in the selection and they don't all\n        // have the same style.\n        styleValue = '';\n        break;\n      }\n    }\n  }\n  return styleValue === null ? defaultValue : styleValue;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isDecoratorNode(node)) {\n    return false;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @deprecated renamed to {@link $trimTextContentFromAnchor} by @lexical/eslint-plugin rules-of-lexical */\nconst trimTextContentFromAnchor = $trimTextContentFromAnchor;\n\nexport { $addNodeStyle, $forEachSelectedTextNode, $getSelectionStyleValueForProperty, $isAtNodeEnd, $isParentElementRTL, $moveCaretSelection, $moveCharacter, $patchStyleText, $setBlocksType, $shouldOverrideDefaultCharacterSelection, $sliceSelectedTextNodeContent, $trimTextContentFromAnchor, $wrapNodes, createDOMRange, createRectsFromDOMRange, getCSSFromStyleObject, getStyleObjectFromCSS, trimTextContentFromAnchor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}