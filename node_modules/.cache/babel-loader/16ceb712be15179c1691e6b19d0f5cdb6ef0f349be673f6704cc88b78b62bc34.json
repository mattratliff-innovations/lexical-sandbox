{"ast":null,"code":"var _jsxFileName = \"/Users/Matt.Ratliff/Development/lexical-sandbox/src/components/Editor/plugins/FontSizeWidget.jsx\",\n  _s = $RefreshSig$();\nimport './FontSizeWidget.css';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport PropTypes from 'prop-types';\nimport { $getSelectionStyleValueForProperty, $patchStyleText } from '@lexical/selection';\nimport { $getSelection, $isRangeSelection, SELECTION_CHANGE_COMMAND, COMMAND_PRIORITY_CRITICAL } from 'lexical';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MIN_ALLOWED_FONT_SIZE = 8;\nconst MAX_ALLOWED_FONT_SIZE = 24;\nconst DEFAULT_FONT_SIZE = '14';\nexport default function FontSizeWidget({\n  selectionFontSize = DEFAULT_FONT_SIZE\n}) {\n  _s();\n  const [editor] = useLexicalComposerContext();\n  const [fontSize, setFontSize] = useState(selectionFontSize);\n  useEffect(() => editor.registerCommand(SELECTION_CHANGE_COMMAND, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const currentSelectionFontSizeOrDefault = $getSelectionStyleValueForProperty(selection, 'font-size', `${DEFAULT_FONT_SIZE}`);\n      const fontSizeNumber = currentSelectionFontSizeOrDefault.replace('px', '');\n      setFontSize(fontSizeNumber);\n    }\n    return false;\n  }, COMMAND_PRIORITY_CRITICAL), [editor]);\n  const updateFontSizeInSelection = useCallback(newFontSize => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if (selection !== null) {\n        $patchStyleText(selection, {\n          'font-size': `${newFontSize}px`\n        });\n      }\n    });\n  }, [editor]);\n  const updateFontSizeByInputValue = inputValueNumber => {\n    let updatedFontSize = Number(inputValueNumber);\n    if (inputValueNumber > MAX_ALLOWED_FONT_SIZE) {\n      updatedFontSize = MAX_ALLOWED_FONT_SIZE;\n    } else if (inputValueNumber < MIN_ALLOWED_FONT_SIZE) {\n      updatedFontSize = MIN_ALLOWED_FONT_SIZE;\n    }\n    setFontSize(updatedFontSize);\n    updateFontSizeInSelection(updatedFontSize);\n  };\n  const handleKeyPress = e => {\n    const inputValueNumber = Number(e.key);\n    if (e.key === 'Tab') {\n      return; // 508: prevents tab trap\n    }\n    if (['e', 'E', '+', '-'].includes(e.key) || Number.isNaN(inputValueNumber)) {\n      e.preventDefault();\n      setFontSize('');\n      return;\n    }\n    if (e.key === 'Enter' || e.key === 'Escape') {\n      e.preventDefault();\n      updateFontSizeByInputValue(inputValueNumber);\n    }\n  };\n\n  // 508 bug worth noting. For now to pass 508 we need to disable the fontsize input because it will steal focus from the\n  // editor; thus, the editor will lose the selection. Disabling the input will allow the user to tab to the + and - buttons.\n  // If we decides to not disable the input field we need to consider using onKeyUp vs onBlur for this method because onBlur\n  // does not provide e.key/e.shiftKey and will result in another 508 issue called a 'tab-trap'.\n  // Will need another card to figure out the entirety of this feature, for now it will pass 508 and work.\n  //\n  // const handleInputBlur = (e) => {\n  //   if (e.key === 'Tab' && e.shiftKey) {\n  //     return;\n  //   } else {\n  //     const inputValueNumber = Number(fontSize);\n  //     updateFontSizeByInputValue(inputValueNumber);\n  //   }\n  // };\n\n  const handleButtonClick = fontValueChange => {\n    const number = Number(fontSize) < MIN_ALLOWED_FONT_SIZE ? Number(DEFAULT_FONT_SIZE) : Number(fontSize);\n    const newFontSize = number + fontValueChange;\n    setFontSize(newFontSize);\n    updateFontSizeInSelection(newFontSize);\n  };\n  useEffect(() => {\n    setFontSize(selectionFontSize);\n  }, [selectionFontSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbar-item flex-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      \"aria-label\": \"Decrement Font Size\",\n      title: \"Decrement Font Size\",\n      disabled: Number(fontSize) <= MIN_ALLOWED_FONT_SIZE,\n      onClick: () => handleButtonClick(-1),\n      className: \"toolbar-item font-decrement\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"format minus-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: fontSize,\n      className: \"toolbar-item font-size-input\",\n      min: MIN_ALLOWED_FONT_SIZE,\n      max: MAX_ALLOWED_FONT_SIZE,\n      onChange: e => setFontSize(e.target.value),\n      onKeyDown: handleKeyPress,\n      disabled: true\n      // onKeyUp={handleInputBlur}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      \"aria-label\": \"Increment Font Size\",\n      title: \"Increment Font Size\",\n      disabled: Number(fontSize) >= MAX_ALLOWED_FONT_SIZE,\n      onClick: () => handleButtonClick(1),\n      className: \"toolbar-item font-increment\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"format add-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(FontSizeWidget, \"c6q/wxHFDKqlulsRyuVPY4S2MBo=\", false, function () {\n  return [useLexicalComposerContext];\n});\n_c = FontSizeWidget;\nexport { MIN_ALLOWED_FONT_SIZE, MAX_ALLOWED_FONT_SIZE, DEFAULT_FONT_SIZE };\nFontSizeWidget.propTypes = {\n  selectionFontSize: PropTypes.string\n};\nvar _c;\n$RefreshReg$(_c, \"FontSizeWidget\");","map":{"version":3,"names":["useLexicalComposerContext","PropTypes","$getSelectionStyleValueForProperty","$patchStyleText","$getSelection","$isRangeSelection","SELECTION_CHANGE_COMMAND","COMMAND_PRIORITY_CRITICAL","React","useState","useCallback","useEffect","jsxDEV","_jsxDEV","MIN_ALLOWED_FONT_SIZE","MAX_ALLOWED_FONT_SIZE","DEFAULT_FONT_SIZE","FontSizeWidget","selectionFontSize","_s","editor","fontSize","setFontSize","registerCommand","selection","currentSelectionFontSizeOrDefault","fontSizeNumber","replace","updateFontSizeInSelection","newFontSize","update","updateFontSizeByInputValue","inputValueNumber","updatedFontSize","Number","handleKeyPress","e","key","includes","isNaN","preventDefault","handleButtonClick","fontValueChange","number","className","children","type","title","disabled","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","min","max","onChange","target","onKeyDown","_c","propTypes","string","$RefreshReg$"],"sources":["/Users/Matt.Ratliff/Development/lexical-sandbox/src/components/Editor/plugins/FontSizeWidget.jsx"],"sourcesContent":["import './FontSizeWidget.css';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport PropTypes from 'prop-types';\nimport { $getSelectionStyleValueForProperty, $patchStyleText } from '@lexical/selection';\nimport {\n  $getSelection, $isRangeSelection, SELECTION_CHANGE_COMMAND, COMMAND_PRIORITY_CRITICAL,\n} from 'lexical';\nimport React, { useState, useCallback, useEffect } from 'react';\n\nconst MIN_ALLOWED_FONT_SIZE = 8;\nconst MAX_ALLOWED_FONT_SIZE = 24;\nconst DEFAULT_FONT_SIZE = '14';\n\nexport default function FontSizeWidget({ selectionFontSize = DEFAULT_FONT_SIZE }) {\n  const [editor] = useLexicalComposerContext();\n  const [fontSize, setFontSize] = useState(selectionFontSize);\n\n  useEffect(() => editor.registerCommand(\n    SELECTION_CHANGE_COMMAND,\n    () => {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const currentSelectionFontSizeOrDefault = $getSelectionStyleValueForProperty(selection, 'font-size', `${DEFAULT_FONT_SIZE}`);\n        const fontSizeNumber = currentSelectionFontSizeOrDefault.replace('px', '');\n        setFontSize(fontSizeNumber);\n      }\n      return false;\n    },\n    COMMAND_PRIORITY_CRITICAL,\n  ), [editor]);\n\n  const updateFontSizeInSelection = useCallback(\n    (newFontSize) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if (selection !== null) {\n          $patchStyleText(selection, { 'font-size': `${newFontSize}px` });\n        }\n      });\n    },\n    [editor],\n  );\n\n  const updateFontSizeByInputValue = (inputValueNumber) => {\n    let updatedFontSize = Number(inputValueNumber);\n    if (inputValueNumber > MAX_ALLOWED_FONT_SIZE) {\n      updatedFontSize = MAX_ALLOWED_FONT_SIZE;\n    } else if (inputValueNumber < MIN_ALLOWED_FONT_SIZE) {\n      updatedFontSize = MIN_ALLOWED_FONT_SIZE;\n    }\n\n    setFontSize(updatedFontSize);\n    updateFontSizeInSelection(updatedFontSize);\n  };\n\n  const handleKeyPress = (e) => {\n    const inputValueNumber = Number(e.key);\n\n    if (e.key === 'Tab') {\n      return; // 508: prevents tab trap\n    }\n\n    if (['e', 'E', '+', '-'].includes(e.key) || Number.isNaN(inputValueNumber)) {\n      e.preventDefault();\n      setFontSize('');\n      return;\n    }\n\n    if (e.key === 'Enter' || e.key === 'Escape') {\n      e.preventDefault();\n\n      updateFontSizeByInputValue(inputValueNumber);\n    }\n  };\n\n  // 508 bug worth noting. For now to pass 508 we need to disable the fontsize input because it will steal focus from the\n  // editor; thus, the editor will lose the selection. Disabling the input will allow the user to tab to the + and - buttons.\n  // If we decides to not disable the input field we need to consider using onKeyUp vs onBlur for this method because onBlur\n  // does not provide e.key/e.shiftKey and will result in another 508 issue called a 'tab-trap'.\n  // Will need another card to figure out the entirety of this feature, for now it will pass 508 and work.\n  //\n  // const handleInputBlur = (e) => {\n  //   if (e.key === 'Tab' && e.shiftKey) {\n  //     return;\n  //   } else {\n  //     const inputValueNumber = Number(fontSize);\n  //     updateFontSizeByInputValue(inputValueNumber);\n  //   }\n  // };\n\n  const handleButtonClick = (fontValueChange) => {\n    const number = Number(fontSize) < MIN_ALLOWED_FONT_SIZE ? Number(DEFAULT_FONT_SIZE) : Number(fontSize);\n    const newFontSize = number + fontValueChange;\n    setFontSize(newFontSize);\n    updateFontSizeInSelection(newFontSize);\n  };\n\n  useEffect(() => {\n    setFontSize(selectionFontSize);\n  }, [selectionFontSize]);\n\n  return (\n    <div className=\"toolbar-item flex-container\">\n      <button\n        type=\"button\"\n        aria-label=\"Decrement Font Size\"\n        title=\"Decrement Font Size\"\n        disabled={Number(fontSize) <= MIN_ALLOWED_FONT_SIZE}\n        onClick={() => handleButtonClick(-1)}\n        className=\"toolbar-item font-decrement\"\n      >\n        <i className=\"format minus-icon\" />\n      </button>\n\n      <input\n        type=\"number\"\n        value={fontSize}\n        className=\"toolbar-item font-size-input\"\n        min={MIN_ALLOWED_FONT_SIZE}\n        max={MAX_ALLOWED_FONT_SIZE}\n        onChange={(e) => setFontSize(e.target.value)}\n        onKeyDown={handleKeyPress}\n        disabled\n        // onKeyUp={handleInputBlur}\n      />\n\n      <button\n        type=\"button\"\n        aria-label=\"Increment Font Size\"\n        title=\"Increment Font Size\"\n        disabled={Number(fontSize) >= MAX_ALLOWED_FONT_SIZE}\n        onClick={() => handleButtonClick(1)}\n        className=\"toolbar-item font-increment\"\n      >\n        <i className=\"format add-icon\" />\n      </button>\n    </div>\n  );\n}\nexport { MIN_ALLOWED_FONT_SIZE, MAX_ALLOWED_FONT_SIZE, DEFAULT_FONT_SIZE };\n\nFontSizeWidget.propTypes = {\n  selectionFontSize: PropTypes.string,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}