{"ast":null,"code":"import { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html';\nimport { $getRoot, $setSelection, TextNode } from 'lexical';\nimport { ExtendedTextNode } from './ExtendedTextNode';\nimport { ListItemNode, ListNode } from '@lexical/list';\nimport { TableCellNode, TableNode, TableRowNode } from '@lexical/table';\nimport './lexicalTable.css';\nconst exportLexicalHtml = editor => {\n  const state = editor.getEditorState();\n  let html = '';\n  state.read(() => {\n    html = $generateHtmlFromNodes(editor, null);\n  });\n  return html;\n};\nconst importLexicalHtml = (editor, value) => {\n  editor.update(() => {\n    const root = $getRoot();\n    const parser = new DOMParser();\n    const dom = parser.parseFromString(value, 'text/html');\n    const nodes = $generateNodesFromDOM(editor, dom);\n    root.clear();\n    root.append(...nodes);\n    $setSelection(null);\n  }, {\n    discrete: true\n  });\n};\nconst LexicalTheme = {\n  code: 'editor-code',\n  heading: {\n    h1: 'editor-heading-h1',\n    h2: 'editor-heading-h2',\n    h3: 'editor-heading-h3',\n    h4: 'editor-heading-h4',\n    h5: 'editor-heading-h5'\n  },\n  image: 'editor-image',\n  link: 'editor-link',\n  list: {\n    listitem: 'editor-listitem',\n    nested: {\n      listitem: 'editor-nested-listitem'\n    },\n    ol: 'editor-list-ol',\n    ul: 'editor-list-ul'\n  },\n  ltr: 'ltr',\n  paragraph: 'editor-paragraph',\n  placeholder: 'editor-placeholder',\n  quote: 'editor-quote',\n  rtl: 'rtl',\n  table: 'scribe_lexical_table',\n  tableCell: 'scribe_lexical_tableCell',\n  tableCellActionButton: 'scribe_lexical_tableCellActionButton',\n  tableCellActionButtonContainer: 'scribe_lexical_tableCellActionButtonContainer',\n  tableCellEditing: 'scribe_lexical_tableCellEditing',\n  tableCellHeader: 'scribe_lexical_tableCellHeader',\n  tableCellPrimarySelected: 'scribe_lexical_tableCellPrimarySelected',\n  tableCellResizer: 'scribe_lexical_tableCellResizer',\n  tableCellSelected: 'scribe_lexical_tableCellSelected',\n  tableCellSortedIndicator: 'scribe_lexical_tableCellSortedIndicator',\n  tableResizeRuler: 'scribe_lexical_tableCellResizeRuler',\n  tableRowStriping: 'scribe_lexical_tableRowStriping',\n  tableScrollableWrapper: 'scribe_lexical_tableScrollableWrapper',\n  tableSelected: 'scribe_lexical_tableSelected',\n  tableSelection: 'scribe_lexical_tableSelection',\n  text: {\n    bold: 'editor-text-bold',\n    code: 'editor-text-code',\n    hashtag: 'editor-text-hashtag',\n    italic: 'editor-text-italic',\n    overflowed: 'editor-text-overflowed',\n    strikethrough: 'editor-text-strikethrough',\n    subscript: 'editor-textSubscript',\n    superscript: 'editor-textSuperscript',\n    underline: 'editor-text-underline',\n    underlineStrikethrough: 'editor-text-underlineStrikethrough'\n  }\n};\nconst editorConfig = {\n  namespace: 'Scribe',\n  nodes: [ListItemNode, ExtendedTextNode, {\n    replace: TextNode,\n    with: node => new ExtendedTextNode(node.__text)\n  }, ListNode, TableCellNode, TableNode, TableRowNode],\n  // Handling of errors during update\n  onError(error) {\n    throw error;\n  },\n  theme: LexicalTheme\n};\nexport { exportLexicalHtml, importLexicalHtml, LexicalTheme, editorConfig };","map":{"version":3,"names":["$generateHtmlFromNodes","$generateNodesFromDOM","$getRoot","$setSelection","TextNode","ExtendedTextNode","ListItemNode","ListNode","TableCellNode","TableNode","TableRowNode","exportLexicalHtml","editor","state","getEditorState","html","read","importLexicalHtml","value","update","root","parser","DOMParser","dom","parseFromString","nodes","clear","append","discrete","LexicalTheme","code","heading","h1","h2","h3","h4","h5","image","link","list","listitem","nested","ol","ul","ltr","paragraph","placeholder","quote","rtl","table","tableCell","tableCellActionButton","tableCellActionButtonContainer","tableCellEditing","tableCellHeader","tableCellPrimarySelected","tableCellResizer","tableCellSelected","tableCellSortedIndicator","tableResizeRuler","tableRowStriping","tableScrollableWrapper","tableSelected","tableSelection","text","bold","hashtag","italic","overflowed","strikethrough","subscript","superscript","underline","underlineStrikethrough","editorConfig","namespace","replace","with","node","__text","onError","error","theme"],"sources":["/Users/Matt.Ratliff/Development/lexical-sandbox/src/components/Editor/plugins/lexicalUtil.js"],"sourcesContent":["import { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html';\nimport {\n  $getRoot, $setSelection,\n  TextNode,\n} from 'lexical';\nimport { ExtendedTextNode } from './ExtendedTextNode';\nimport { ListItemNode, ListNode } from '@lexical/list';\nimport { TableCellNode, TableNode, TableRowNode } from '@lexical/table';\nimport './lexicalTable.css';\n\n\nconst exportLexicalHtml = (editor) => {\n  const state = editor.getEditorState();\n  let html = '';\n  state.read(() => {\n    html = $generateHtmlFromNodes(editor, null);\n  });\n  return html;\n};\n\nconst importLexicalHtml = (editor, value) => {\n  editor.update(() => {\n    const root = $getRoot();\n    const parser = new DOMParser();\n    const dom = parser.parseFromString(value, 'text/html');\n    const nodes = $generateNodesFromDOM(editor, dom);\n    root.clear();\n    root.append(...nodes);\n    $setSelection(null);\n  }, { discrete: true });\n};\n\nconst LexicalTheme = {\n  code: 'editor-code',\n  heading: {\n    h1: 'editor-heading-h1',\n    h2: 'editor-heading-h2',\n    h3: 'editor-heading-h3',\n    h4: 'editor-heading-h4',\n    h5: 'editor-heading-h5',\n  },\n  image: 'editor-image',\n  link: 'editor-link',\n  list: {\n    listitem: 'editor-listitem',\n    nested: {\n      listitem: 'editor-nested-listitem',\n    },\n    ol: 'editor-list-ol',\n    ul: 'editor-list-ul',\n  },\n  ltr: 'ltr',\n  paragraph: 'editor-paragraph',\n  placeholder: 'editor-placeholder',\n  quote: 'editor-quote',\n  rtl: 'rtl',\n  table: 'scribe_lexical_table',\n  tableCell: 'scribe_lexical_tableCell',\n  tableCellActionButton: 'scribe_lexical_tableCellActionButton',\n  tableCellActionButtonContainer:\n    'scribe_lexical_tableCellActionButtonContainer',\n  tableCellEditing: 'scribe_lexical_tableCellEditing',\n  tableCellHeader: 'scribe_lexical_tableCellHeader',\n  tableCellPrimarySelected: 'scribe_lexical_tableCellPrimarySelected',\n  tableCellResizer: 'scribe_lexical_tableCellResizer',\n  tableCellSelected: 'scribe_lexical_tableCellSelected',\n  tableCellSortedIndicator: 'scribe_lexical_tableCellSortedIndicator',\n  tableResizeRuler: 'scribe_lexical_tableCellResizeRuler',\n  tableRowStriping: 'scribe_lexical_tableRowStriping',\n  tableScrollableWrapper: 'scribe_lexical_tableScrollableWrapper',\n  tableSelected: 'scribe_lexical_tableSelected',\n  tableSelection: 'scribe_lexical_tableSelection',\n  text: {\n    bold: 'editor-text-bold',\n    code: 'editor-text-code',\n    hashtag: 'editor-text-hashtag',\n    italic: 'editor-text-italic',\n    overflowed: 'editor-text-overflowed',\n    strikethrough: 'editor-text-strikethrough',\n    subscript: 'editor-textSubscript',\n    superscript: 'editor-textSuperscript',\n    underline: 'editor-text-underline',\n    underlineStrikethrough: 'editor-text-underlineStrikethrough',\n  },\n};\n\nconst editorConfig = {\n  namespace: 'Scribe',\n  nodes: [ListItemNode, ExtendedTextNode,\n    { replace: TextNode, with: (node) => new ExtendedTextNode(node.__text) },\n    ListNode, TableCellNode, TableNode, TableRowNode],\n  // Handling of errors during update\n  onError(error) {\n    throw error;\n  },\n  theme: LexicalTheme,\n};\n\nexport {\n  exportLexicalHtml, importLexicalHtml, LexicalTheme, editorConfig,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}