{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { setScrollableTablesActive, registerTablePlugin, registerTableSelectionObserver, registerTableCellUnmergeTransform, TableCellNode } from '@lexical/table';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * A plugin to enable all of the features of Lexical's TableNode.\n *\n * @param props - See type for documentation\n * @returns An element to render in your LexicalComposer\n */\nfunction TablePlugin({\n  hasCellMerge = true,\n  hasCellBackgroundColor = true,\n  hasTabHandler = true,\n  hasHorizontalScroll = false\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    setScrollableTablesActive(editor, hasHorizontalScroll);\n  }, [editor, hasHorizontalScroll]);\n  useEffect(() => registerTablePlugin(editor), [editor]);\n  useEffect(() => registerTableSelectionObserver(editor, hasTabHandler), [editor, hasTabHandler]);\n\n  // Unmerge cells when the feature isn't enabled\n  useEffect(() => {\n    if (!hasCellMerge) {\n      return registerTableCellUnmergeTransform(editor);\n    }\n  }, [editor, hasCellMerge]);\n\n  // Remove cell background color when feature is disabled\n  useEffect(() => {\n    if (hasCellBackgroundColor) {\n      return;\n    }\n    return editor.registerNodeTransform(TableCellNode, node => {\n      if (node.getBackgroundColor() !== null) {\n        node.setBackgroundColor(null);\n      }\n    });\n  }, [editor, hasCellBackgroundColor, hasCellMerge]);\n  return null;\n}\nexport { TablePlugin };","map":{"version":3,"names":["useLexicalComposerContext","setScrollableTablesActive","registerTablePlugin","registerTableSelectionObserver","registerTableCellUnmergeTransform","TableCellNode","useEffect","TablePlugin","hasCellMerge","hasCellBackgroundColor","hasTabHandler","hasHorizontalScroll","editor","registerNodeTransform","node","getBackgroundColor","setBackgroundColor"],"sources":["/Users/Matt.Ratliff/Development/lexical-sandbox/node_modules/@lexical/react/LexicalTablePlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { setScrollableTablesActive, registerTablePlugin, registerTableSelectionObserver, registerTableCellUnmergeTransform, TableCellNode } from '@lexical/table';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * A plugin to enable all of the features of Lexical's TableNode.\n *\n * @param props - See type for documentation\n * @returns An element to render in your LexicalComposer\n */\nfunction TablePlugin({\n  hasCellMerge = true,\n  hasCellBackgroundColor = true,\n  hasTabHandler = true,\n  hasHorizontalScroll = false\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    setScrollableTablesActive(editor, hasHorizontalScroll);\n  }, [editor, hasHorizontalScroll]);\n  useEffect(() => registerTablePlugin(editor), [editor]);\n  useEffect(() => registerTableSelectionObserver(editor, hasTabHandler), [editor, hasTabHandler]);\n\n  // Unmerge cells when the feature isn't enabled\n  useEffect(() => {\n    if (!hasCellMerge) {\n      return registerTableCellUnmergeTransform(editor);\n    }\n  }, [editor, hasCellMerge]);\n\n  // Remove cell background color when feature is disabled\n  useEffect(() => {\n    if (hasCellBackgroundColor) {\n      return;\n    }\n    return editor.registerNodeTransform(TableCellNode, node => {\n      if (node.getBackgroundColor() !== null) {\n        node.setBackgroundColor(null);\n      }\n    });\n  }, [editor, hasCellBackgroundColor, hasCellMerge]);\n  return null;\n}\n\nexport { TablePlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,yBAAyB,EAAEC,mBAAmB,EAAEC,8BAA8B,EAAEC,iCAAiC,EAAEC,aAAa,QAAQ,gBAAgB;AACjK,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAAC;EACnBC,YAAY,GAAG,IAAI;EACnBC,sBAAsB,GAAG,IAAI;EAC7BC,aAAa,GAAG,IAAI;EACpBC,mBAAmB,GAAG;AACxB,CAAC,EAAE;EACD,MAAM,CAACC,MAAM,CAAC,GAAGZ,yBAAyB,CAAC,CAAC;EAC5CM,SAAS,CAAC,MAAM;IACdL,yBAAyB,CAACW,MAAM,EAAED,mBAAmB,CAAC;EACxD,CAAC,EAAE,CAACC,MAAM,EAAED,mBAAmB,CAAC,CAAC;EACjCL,SAAS,CAAC,MAAMJ,mBAAmB,CAACU,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACtDN,SAAS,CAAC,MAAMH,8BAA8B,CAACS,MAAM,EAAEF,aAAa,CAAC,EAAE,CAACE,MAAM,EAAEF,aAAa,CAAC,CAAC;;EAE/F;EACAJ,SAAS,CAAC,MAAM;IACd,IAAI,CAACE,YAAY,EAAE;MACjB,OAAOJ,iCAAiC,CAACQ,MAAM,CAAC;IAClD;EACF,CAAC,EAAE,CAACA,MAAM,EAAEJ,YAAY,CAAC,CAAC;;EAE1B;EACAF,SAAS,CAAC,MAAM;IACd,IAAIG,sBAAsB,EAAE;MAC1B;IACF;IACA,OAAOG,MAAM,CAACC,qBAAqB,CAACR,aAAa,EAAES,IAAI,IAAI;MACzD,IAAIA,IAAI,CAACC,kBAAkB,CAAC,CAAC,KAAK,IAAI,EAAE;QACtCD,IAAI,CAACE,kBAAkB,CAAC,IAAI,CAAC;MAC/B;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACJ,MAAM,EAAEH,sBAAsB,EAAED,YAAY,CAAC,CAAC;EAClD,OAAO,IAAI;AACb;AAEA,SAASD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}