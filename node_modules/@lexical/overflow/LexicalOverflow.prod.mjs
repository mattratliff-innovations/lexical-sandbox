/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

import{ElementNode as e,$applyNodeReplacement as r}from"lexical";function t(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var n=t((function(e){const r=new URLSearchParams;r.append("code",e);for(let e=1;e<arguments.length;e++)r.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${r} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));class o extends e{static getType(){return"overflow"}static clone(e){return new o(e.__key)}static importJSON(e){return a().updateFromJSON(e)}static importDOM(){return null}createDOM(e){const r=document.createElement("span"),t=e.theme.characterLimit;return"string"==typeof t&&(r.className=t),r}updateDOM(e,r){return!1}insertNewAfter(e,r=!0){return this.getParentOrThrow().insertNewAfter(e,r)}excludeFromCopy(){return!0}static transform(){return e=>{i(e)||n(204),e.isEmpty()&&e.remove()}}}function a(){return r(new o)}function i(e){return e instanceof o}export{a as $createOverflowNode,i as $isOverflowNode,o as OverflowNode};
